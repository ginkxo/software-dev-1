package finalproject;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import java.util.ArrayList;
import java.util.HashMap;

public class DBManager {
	private int NextUserID, NextProductID, NextCategoryID; // max <type>ID parsed + 1 - send these numbers to Store once done parsing.
	private String CSVpath; // The location of the file we will read and write to	

	// These are just a thought so that we don't have to search for where to add stuff to each time,
	// But that 'efficient' method would make us more prone to messing up our file so feel free
	// to delete these if you think they're dangerous / unnecessary.
	private int CategoryLocation; // The line in the CSV storing the list of categories
	private int EndofUsers; //The line in the CSV that new users should be inserted at
	private int EndofProducts; // The line in the CSV that new products should be inserted at

	
	DBManager(String CSVpath) {
	this.CSVpath = CSVpath;
	}
		
	// Made some private parse methods below that will be called by the more
	// encompassing methods parseUsers etc just to break the code up.

    // ******************************************************************************************************
    // *																									*
    // *  Below here are methods for WRITING purposes. Info is sent from store to update our permanent DB.  *
    // *																									*
    // ******************************************************************************************************

	/**
	 * 
	 * @param line -> a CSV line that contains information pertaining to a single user.
	 * @return User -> The User object parsed from the CSV information
	 */	
	private User parseUser(String line) {
		//TODO if ... return Administrator(...), else return Shopper(...)
		// Will likely use constructors like the following to create the user:
		// public Shopper(String userName, String password, City city, String address, int UserID, HashMap<Product, Integer> cart)
		return null;
	}

	/**
	 * 
	 * @param line -> a CSV line that contains all information pertaining to a single product.
	 * @return User -> The Product object parsed from the CSV information
	 */
	private Product parseProduct(String line) {
		//TODO
		return null;
	}

	/**
	 * 
	 * @param line -> a CSV line that contains all information pertaining to a single product.
	 * @return User -> The Product object parsed from the CSV information
	 */
	private ArrayList<Category> parseCategory(String line) {
		//TODO
		return null;
	}
	
	private Graph parseGraph(String line) {
	// TODO We will need to recreate our graph of cities and connections from the file as well.
	// Note: Graph just holds an ArrayList of cities, then the connections are stored in the city variables.
	// So we can put a city on each line and then just make sure our graph knows all of them
		return null;
	}
	    
	/**
	 * Returns the current list of users
	 * @param
	 */
	public HashMap<String, User> loadUsers(HashMap<String, City> cityList, HashMap<Integer, Product> productList) {
		// form: UserAdmin(true or false),Username,Password,City(city),Address,UserID,Cart{Product:quantity|etc}
        HashMap<String, User> listOfUsers = new HashMap<String,User>();
        HashMap<Shopper, String> userCarts = new HashMap<Shopper, String>();
        Scanner scanner = new Scanner(this.CSVpath);
        scanner.next("Categories,,");
        scanner.nextLine();
        while(!scanner.hasNext("Users,,")) {
            scanner.nextLine();
        }
        scanner.nextLine();
        while(scanner.hasNext()) {
            String[] userInformation = scanner.nextLine().split(",");
            boolean isAdmin = Boolean.parseBoolean(userInformation[0]);
            if (!isAdmin) {
                Shopper s = new Shopper(
                        userInformation[1],
                        userInformation[2],
                        cityList.get(userInformation[3]),
                        userInformation[4],
                        Integer.parseInt(userInformation[5]),
                        new HashMap<Product,Integer>()
                );
                userCarts.put(s, userInformation[6]);
                listOfUsers.put(s.getUsername(), s);
            } else {
                Administrator a = new Administrator(
                        userInformation[1],
                        userInformation[2]
                );
                listOfUsers.put(a.getUserName(), a);
            }
        }
        scanner.close();

        //TODO: associate user carts with the users, similar to what we do with cities
		return listOfUsers;
	}

	/**
	 * Returns the current list of products
	 * @param
	 */
	public HashMap<Integer, Product> loadProducts(/*ArrayList<String> categories*/) { //TODO why input param?
		//TODO start at a key for a product token, return a hashmap of all the products until the end token
        HashMap<Integer,Product> listOfProducts = new HashMap<Integer,Product>();
        // form: CategoryID,ProductImage,ProductName,ProductDescription,DoublePrice,IntProductID
        // TODO where is ProductID? The hashmap has to map ID to product, rather than name.
        Scanner scanner = new Scanner(this.CSVpath);
        scanner.next("Categories,,");
        scanner.nextLine();
        while(!scanner.hasNext("Products,,")) {
            scanner.nextLine();
        }
        scanner.nextLine();
        while(!scanner.hasNext("Users,,")) {
            String[] productInformation = scanner.nextLine().split(",");
            
            Product p = new Product(
                    Integer.parseInt(productInformation[0]),
                    productInformation[1],
                    productInformation[2],
                    productInformation[3],
                    Double.parseDouble(productInformation[4]),
                    Integer.parseInt(productInformation[5])
            );
            // Parse together all quantities at all distribution centers for the product.
            int currentPos = 6;
            while (productInformation.length > currentPos) { //test for fencepost error
            	City center = Store.graph.cityFromString(productInformation[currentPos]);
            	int quantity = Integer.parseInt(productInformation[currentPos + 1]);
            	p.addDistributionCenter(center);
            	p.setStock(center, quantity);
            	currentPos += 2;
            }
            //TODO must build up stock HashMap<City, Integer> from remaining data in line
            //Index position [6] onward of form cityname,quantity,cityname,quantity,... until done?
            listOfProducts.put(p.getProductID(),p);
        }
        scanner.close();
        return listOfProducts;
	}

    /**
     * loads the categories from the database
     * @return categoryList - the list of categories in the database
     */
    public HashMap<Integer, Category> loadCategories() {
    	// * Changed from type String to type Category
    	// form: CategoryName,CategoryID
        HashMap<Integer, Category> categoryList = new HashMap<Integer, Category>();
        Scanner scanner = new Scanner(this.CSVpath);
        scanner.next("Categories,,");
        scanner.nextLine();
        while (!scanner.hasNext("Cities,,")) {
            String[] catInformation = scanner.nextLine().split(",");
            int ID = Integer.parseInt(catInformation[1]);
            categoryList.put(ID, new Category(catInformation[0],ID));
        }
        scanner.close();
        return categoryList;
    }

    public HashMap<String, City> loadCities() {
        HashMap<String, City> cityMap = new HashMap<String, City>();
        HashMap<City, String> cityConnectionString = new HashMap<City,String>();
        // form: CityName,DistributionBoolean,{city1:int|city2:int|city3:int}
        // for each line, first create a new City object
        // give it the name based on CityName, and give it the boolean based on DistributionBoolean
        // add this object to cityConnectionString as a key containing the connections string
        // redo this for all city lines
        // when done, close scanner
        // now, go through cityConnectionString and access each connection string
        // parse through the string: put City:integer based on the string information into the
        // appropriate hashmap attribute of that particular city, as defined as a key for that string
        // finally, return the cityMap output
        Scanner scanner = new Scanner(this.CSVpath);
        scanner.next("Categories,,");
        scanner.nextLine();
        while(!scanner.hasNext("Cities,,")) {
            scanner.nextLine();
        }
        scanner.nextLine();
        while(!scanner.hasNext("Products,,")) {
            String[] cityInformation = scanner.nextLine().split(",");
            City city = new City(cityInformation[0],Boolean.parseBoolean(cityInformation[1]));
            cityMap.put(city.getName(),city);
            cityConnectionString.put(city,cityInformation[2]);
        }

        scanner.close();

        //TODO: now do the city integer stuff;
        // using the Iterator, we will iterate through the keys of cityConnectionString
        // at each point here, we break apart the assigned string and define the city's adjacent conns as following:
            // blahblah.put(cityMap.get("cityname"), "string's integer converted to int")

        return cityMap;
    }
    
    // ******************************************************************************************************
    // *																									*
    // *  Below here are methods for WRITING purposes. Info is sent from store to update our permanent DB.  *
    // *																									*
    // ******************************************************************************************************

    /**
	 * Updates the stored information about an existing user.
	 * @param user
	 */
	void updateUser(User user) {
		//TODO searches for the user matching the user information, and overwrites line
	}	

	/**
	 * Adds a new user to the database.
	 * @param user
	 */
	void addUser(User user) {
		//TODO Should update and add be seperate? The only benefit is that when we add a new user,
		// we don't have to look through the entire userlist to see if it already exists. Since Store
		// will always know which it's doing anyway, then it might make sense to keep these sepearate
		// Even though updateUser will likely just overwrite the entire User line with a new version of
		// that user.
	}
	
	//TODO update / add for other types.

	/**
	 *
	 */
	void updateProduct(Product product) {
		//TODO
	}

	void addProduct (Product product) {
		//TODO
	}

    void addCategory (String category) {
    	//TODO
    }
    
    void addCity(City city) {
    	//TODO
    }

    void addEdge(City a, City b, int distance) {
    	//TODO
    }

    /**
     * Modify the quantity in center city to newStock for given product.
     * @param product -> the product for which the stock is changing
     * @param city -> the city where the stock is changing
     * @param newStock -> the new stock number
     */
	void modifyQuantity(Product product, City city, int newStock) {
		// TODO		
	}

	/**
	 * Adds distribution center to list of centers in stock hashmap for all products with quantity 0.
	 * @param newCity -> The new distribution center added.
	 */
	void addCenterToProducts(City newCity) {
		// TODO
	}    
}

	

