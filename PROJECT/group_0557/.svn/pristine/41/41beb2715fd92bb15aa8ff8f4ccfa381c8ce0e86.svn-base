package finalproject;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class Store {
	
	private static int userIDGenerator = 1;
	private static int categoryIDGenerator = 1;
	private static int productIDGenerator = 1;
	private int revenueGenerated;
	private static HashMap<String, User> userList; // connects username to user object.
	private static HashMap<Integer, Product> productList; // connects productID to Product object.
	private static DBManager csvDB;
	private static HashMap<Integer, User> sessionIDList; // connects sessionID to User object
	private static HashMap<Integer, Category> categories;
    private static HashMap<String, City> cities; // connects city name to city object
    protected static Graph graph;

    public HashMap<String, City> getCities() {
    	return cities;
    }
    
    // ******************************************************************************************************
    // *																									*
    // *  *  *  *  *  Print methods to test a variety of parameters listed below testing purposes  *  *  *  *
    // *																									*
    // ******************************************************************************************************
    
    public String printCities() {
    	String cits = "Cities:";
		for (String ID : cities.keySet()) {
			if (ID != cities.get(ID).getName()) {return "NAME MISMATCH ERROR!";}
			cits += ("Name: " + cities.get(ID).getName() + ", Distribution Centre? ");
			if (cities.get(ID).distribution) cits += "yes";
			else {cits += "no";}
			cits += "\n";
		}
		return cits;
    }

    public String printCategories() {
    	String cats = "";
		for (int ID : categories.keySet()) {
			if (ID != categories.get(ID).getID()) {return "ID MISMATCH ERROR!";}
			cats += ("ID: " + categories.get(ID).getID() + ", Category name: " + categories.get(ID).getName() + "\n");
			}
		return cats;
    }
	/**
	 * Constructor that takes a .csv file pathname. 
	 * Information such as products and users stored in the csv file is loaded 
	 * into the class as different data structures.
	 * 
	 * @param csvPath	The .csv file that the constructor loads from.
	 * @throws FileNotFoundException 
	 */
	public Store(String csvPath) throws FileNotFoundException{
		csvDB = new DBManager(csvPath);
        categories = this.csvDB.loadCategories(); //empty arraylist for product categories
        graph = csvDB.loadCities();
        productList = this.csvDB.loadProducts(); //returns hashmap of products
		userList = this.csvDB.loadUsers(cities,productList); //returns hashmap of users
		sessionIDList = new HashMap<Integer, User>(); //empty hashmap of sessionIDs
		
		// set userIDGenerator to appropriate value
		for (User user : userList.values()) {
			if (user.getUserID() >= userIDGenerator) userIDGenerator = user.getUserID() + 1;
		}
		// set categoryIDGenerator to appropriate value
		for (Category cat : categories.values()) {
			if (cat.getID() >= categoryIDGenerator) categoryIDGenerator = cat.getID() + 1;
		}
		// set productIDGenerator to appropriate value
		for (Product prod : productList.values()) {
			if (prod.getProductID() >= productIDGenerator) productIDGenerator = prod.getProductID() + 1;
		}	
	}
	
	
	/**
	 * Returns a username if a successful login is performed by a user. A successful log-in by a user will also generate
	 * a unique sessionID as an authentication token. 
	 * <p>
	 * A log-in is successful if the username the user provides is in the csv file the Store reads from, and the password 
	 * provided is correct. 
	 * 
	 * @param username	The username to login to the Store
	 * @param password	The password to go with the username provided
	 */
	public User login(String username, String password){
		if (userList.get(username) != null) {
			if (userList.get(username).getPassword().equals(password)) {
				Random rand = new Random();
				int newID = rand.nextInt(900000) + 100000;
				while (sessionIDList.containsKey((Integer)newID)) newID = rand.nextInt(900000) + 100000;
				userList.get(username).setSessionID(newID);
				sessionIDList.put(userList.get(username).getSessionID(), userList.get(username));
				return userList.get(username);
			}

		}
		return null;
	}
	
	
	/**
	 * Creates and adds a new Shopper into the Store. The new shopper is put into the list of Users, and then written 
	 * to the CSV file the Store reads from. 
	 * 
	 * @param username	The username to login to the Store
	 * @param password	The password to go with the username provided
	 * @param city		City object representing the city the Shopper lives in
	 * @param address	Street address of the Shopper
	 * @param UserID	A unique identification number for the Shopper
	 * @param cart		A HashMap containing the products in this Shopper's cart

	 */
	public void createShopper(String username, String password, City city, String address, int UserID, HashMap<Product, Integer> cart){
		//TODO can use just username/pw as parameters now with overloaded Shopper constructor
		//TODO find a way to create the object w/o a userID
		Shopper s = new Shopper(username,password);
		s.setUserID(userIDGenerator);
		userIDGenerator++;
		userList.put(s.getUserName(), s);
		csvDB.addUser(s);	
	}
	
	/**
	 * Creates and adds a new Administrator into the Store. The new Administrator is put into the list of users, and then 
	 * written to the CSV file the Store reads from. 
	 * 
	 * @param username	The username to login to the Store
	 * @param password	The password to go with the username provided
	 */
	//this will change once Admin class gets changed. It should take more params. 
	public void createAdmin(String username, String password){
		Administrator a = new Administrator(username, password);
		a.setUserID(userIDGenerator);
		userIDGenerator++;
		userList.put(a.getUserName(), a);
		csvDB.addUser(a);
	}
	
	
	
	/**
	 * Adds a new Product into the store. The new Product is then put into the list of products, and then written to the
	 * CSV file the Store reads from. The new Product will have an initial quantity of zero. 
	 * <p>
	 * A Product can only be added if the Store determines that an Administrator is accessing this method. A sessionID
	 * that belongs to an Administrator must be provided.
	 * 
	 * @param category		Category type of the Product, for example a T-shirt
	 * @param image			An Image of the Product. 
	 * @param name 			The name of the Product.
	 * @param description	The description of the Product.
	 * @param price			The price of the Product.
	 * @param sessionID		The sessionID of the user who is attempting to use this method. 
	 */
	public static int addProduct(Category category, String image, String name, String description, double price, int sessionID){
		System.out.println("George sends ID: " + sessionID);
		if (isAdmin(sessionID)) {
			Product p = new Product(category, image, name, description, price);
			p.setProductID(productIDGenerator);
			productIDGenerator++;
			productList.put(p.getProductID(), p);
			csvDB.addProduct(p);
			return p.getProductID();
		}
		return -1;

	}
	
	/**
	 * Modifies a Product that currently exists in the Store. The updated Product is written back into the CSV file the
	 * Store reads from. 
	 * <p>
	 * A Product can only be modified if the Store determines that an Administrator is accessing this method. A sessionID
	 * that belongs to an Administrator must be provided. 
	 * 
	 * @param product		The Product that is being modified. 
	 * @param image			An Image of the Product. 
	 * @param name 			The name of the Product.
	 * @param description	The description of the Product.
	 * @param price			The price of the Product.
	 * @param quantity		The quantity of the Product available.
	 * @param sessionID		The sessionID of the user who is attempting to use this method. 
	 */
	public static void modifyProduct(Product product, Category category, String image,
			String name, String description, double price, int sessionID){
		if (isAdmin(sessionID)){
			product.setCategory(category);
			product.setDescription(description);
			product.setPrice(price);
			// I removed quantity here, since we don't want to ever modify it directly because distribution centers
			product.setName(name);
			product.setImage(image);
			csvDB.updateProduct(product);
		}
	}
	
	public static void modifyQuantity(Product product, City city, int newStock, int sessionID) {
		if (isAdmin(sessionID)){
			product.setStock(city, newStock);
			csvDB.modifyQuantity(product, city, newStock); // product.quantity also changed here.
			// we actually don't have to keep track of overall quantity in the csv since it's always
			// build up from the distribution centers.
		}
	}

	/**
	 * Returns a HashMap of Users in this Store.
	 *
	 */
	// needs an update after User.java is completed. //TODO User.java exists now, what needs to change here?
	public HashMap<String, User> getUserList(){
		return userList;
	}
	
	/**
	 * Returns a HashMap of Products in this store. 
	 */
	public HashMap<Integer, Product> getProductList(){
		return productList;
	}
	
	
	/**
	 * Returns a boolean value to check if a user is logged in by checking the user's sessionID.
	 * @param sessionID		The sessionID of the user who is attempting to use this method. 
	 */
	public static boolean authenticate(int sessionID){
		User checker = sessionIDList.get(sessionID);
		return checker != null;
		
	}
	
	/**
	 * Returns a boolean value to check if an authenticated user is an Administrator by checking the user's sessionID.
	 * @param sessionID		The sessionID of the user who is attempting to use this method. 
	 */
	public static boolean isAdmin(int sessionID){
		if (authenticate(sessionID)){
			User user = sessionIDList.get(sessionID); 
			return user.getClass().equals(Administrator.class);
		}
		return false;
	}

	/**
	 * Returns a boolean value to check if an authenticated user is an Administrator by checking the user's sessionID.
	 * @param sessionID		The sessionID of the user who is attempting to use this method. 
	 */
	public static boolean isShopper(int sessionID){
		if (authenticate(sessionID)){
			User user = sessionIDList.get(sessionID); 
			return user.getClass().equals(Shopper.class);
		}
		return false;
	}

	/**
	 * Adds a category of products to the ArrayList of categories in the Store. 
	 * <p>
	 * A category can only be added if the Store determines that an Administrator is accessing this method. A sessionID
	 * that belongs to an Administrator must be provided. 
	 * 
	 * @param category		Category of Product to be added.
	 * @param sessionID		The sessionID of the user attempting to use this method. 	

	 */
	public static int addCategory(String category, int sessionID){
		if (isAdmin(sessionID)){
			Category newCat = new Category(category, categoryIDGenerator);
			categories.put(categoryIDGenerator, newCat);
			categoryIDGenerator++;
			return newCat.getID();
		}
		return -1;
	}

	public void addCity(String name, boolean isDistribution, int sessionID) {
		if (isAdmin(sessionID)){
			City NewCity = new City(name, isDistribution);
			graph.addCity(NewCity);
			csvDB.addCity(NewCity);
			if (isDistribution) {
				// Add this distribution center with quantity 0 to all existing products
				for (Integer p : productList.keySet()) {
					Product currentProduct = productList.get(p);
					currentProduct.addDistributionCenter(NewCity);
					csvDB.addCenterToProducts(NewCity);
				}
			}
		}
	}
	
	public void addEdge(City cityA, City cityB, int distance, int sessionID) {
		if (isAdmin(sessionID)){
			graph.addEdge(cityA, cityB, distance);
			csvDB.addEdge(cityA, cityB, distance); // has to add the edge to both A and B?
		}
	}

    public static HashMap<Integer, Category> getCategories() {
    	return categories;
    }

    public static Category getCategory(Integer catID) {
    	return categories.get(catID);
    }

	

}
