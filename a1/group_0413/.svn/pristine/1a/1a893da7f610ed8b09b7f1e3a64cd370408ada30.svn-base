package world;

import heap.HeapItem;

//TODO: compareTo() needs to be implemented properly.
//TODO: getFCost() and getHCost() aren't used...look into that.

public class Node implements HeapItem {

    protected boolean walkable; // true if this node is available for passage, false if it belongs to an obstacle (i.e. an island)
    public int gridX, gridY; // gridX runs left to right starting from 0, gridY runs top to bottom starting from 0
    protected int gCost, hCost; // gCost & hCost as explained in the A-star algorithm (check the given web links)
    protected int heapIndex;    // this is used to implement the methods imposed by HeapItem interface
    protected Node parent;      // points to previous node in the calculated path
    protected boolean inPath;   // true if the node belongs to the calculated path, false otherwise

    public Node(boolean walkable, int gridX, int gridY) {
        this.walkable = walkable;
        this.gridX = gridX;
        this.gridY = gridY;
        this.inPath = false;
    }

    public int getFCost() {
        return gCost + hCost;
    }

    public int getHCost() {
        return hCost;
    }

    @Override
    public int compareTo(HeapItem other) {
        // Your implementation goes here. Similar to Lab4

        if(this.getFCost() > ((Node) other).getFCost()){
            return 1;
        }else if(this.getFCost() < ((Node) other).getFCost()){
            return -1;
        }else{
            return 0;
        }
    }

    @Override
    public void setHeapIndex(int index) {
        heapIndex = index;
    }

    @Override
    public int getHeapIndex() {
        return heapIndex;
    }

    @Override
    public boolean equals(Object other) {
        // Your implementation goes here. Two nodes are equal if they occupy same position in the map.

        if (this == other) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (other instanceof Node) {
            Node n = (Node) other;
            return this.gridX == n.gridX && this.gridY == n.gridY;
        }
        return false;
    }
}
